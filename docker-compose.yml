services:
  app:
    build: .
    container_name: grant_scraper_app
    depends_on:
      selenium-hub:
        condition: service_healthy
      db:
        condition: service_started
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - .:/app
    command: tail -f /dev/null
    #python app/main.py
    ports:
      - "8080:5000"

  db:
    image: postgres:15.7-bullseye
    container_name: postgres_opportunities
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: redis_grants
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  
  llm:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    container_name: ollama_llm
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    depends_on:
      db:
        condition: service_started
    environment:
      - OLLAMA_HOST=0.0.0.0:11434  

    

  selenium-hub:
    image: seleniarm/hub:latest
    container_name: selenium_hub
    ports:
      - "4444:4444"  
      - "4442:4442"  
      - "4443:4443"  
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 5s
      timeout: 5s
      retries: 30

  chrome-node:
    image: seleniarm/node-chromium:latest
    container_name: chrome_node
    depends_on:
      - selenium-hub
    shm_size: 2gb
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=4
      - SE_VNC_ENABLED=true
    ports:
      - "7900:7900"
  
  rq_worker:
    build: .
    container_name: rq_worker
    command: python app/workers/rq_worker.py
    restart: unless-stopped
    depends_on:
      selenium-hub:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
      # dev on Mac: leave LLM_BASE_URL unset to use http://host.docker.internal:11434
      - SELENIUM_REMOTE_URL=http://selenium-hub:4444/wd/hub
      - RQ_DEFAULT_TIMEOUT=72000  
      - WEEKLY_MIN_INTERVAL_SECONDS=518400
      - WEEKLY_LOCK_TTL_SECONDS=72000
      - WEEKLY_LAST_SUCCESS_TS_KEY=weekly:last_success_ts
    volumes:
      - .:/app
      - hf_cache:/root/.cache/huggingface
      - st_cache:/root/.cache/torch/sentence_transformers

    working_dir: /app

  rqscheduler:
    build:
      context: .
      dockerfile: Dockerfile.rqscheduler
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -lc "
        python -u app/workers/seed_schedule.py &&
        exec rqscheduler --url redis://redis:6379/0 --interval 30
      "
    environment:
      - REDIS_URL=redis://redis:6379/0
      - RQ_QUEUE=default
      - RQ_JOB_ID=weekly_pipeline_job
      - RQ_FUNC=app.tasks.weekly_pipeline
      - RQ_CRON=0 8 * * 0       
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nfrom redis import Redis\nr=Redis.from_url('redis://redis:6379/0')\nprint(int(r.zscore('rq:scheduler:scheduled_jobs','weekly_pipeline_job') is not None))\nPY"]
      interval: 600s
      timeout: 5s
      retries: 3
      start_period: 20s  
    volumes:
      - .:/app
    working_dir: /app
  

  migrate:
    build: .
    depends_on:
      db:
        condition: service_started
    environment:
      - DATABASE_URL=${DATABASE_URL}
    command: alembic upgrade head
    restart: "no"

  api:
    build: .
    depends_on:
      db:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - USER_CODE=${USER_CODE}
      - ADMIN_CODE=${ADMIN_CODE}
      - GUEST_CODE=${GUEST_CODE}
      - FRONTEND_ORIGIN=${FRONTEND_ORIGIN:-http://localhost:4200}
    ports:
      - "8000:8000"
    command: uvicorn app.api_app:app --host 0.0.0.0 --port 8000


  

volumes:
  pgdata:
  ollama_models:
  hf_cache:
  st_cache:
  redisdata:
